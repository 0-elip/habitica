// Generated by CoffeeScript 1.6.3
(function() {
  var algos, app, async, derby, get, i18n, misc, ready, view, _;

  derby = require('derby');

  derby.use(require('derby-ui-boot'), {
    styles: []
  });

  derby.use(require('../'));

  derby.use(require('derby-auth/components'));

  app = derby.createApp(module);

  get = app.get, view = app.view, ready = app.ready;

  i18n = require('./i18n');

  i18n.localize(app, {
    availableLocales: ['en', 'he', 'bg', 'nl'],
    defaultLocale: 'en',
    urlScheme: false,
    checkHeader: true
  });

  misc = require('./misc');

  misc.viewHelpers(view);

  _ = require('lodash');

  algos = require('habitrpg-shared/script/algos');

  async = require('async');

  get('/', function(page, model, params, next) {
    var uuid, _ref, _ref1;
    if (((_ref = page.params) != null ? (_ref1 = _ref.query) != null ? _ref1.play : void 0 : void 0) != null) {
      return page.redirect('/');
    }
    /*
    Subscribe to the user, the users's party (meta info like party name, member ids, etc), and the party's members. 3 subscriptions.
    */

    uuid = model.get('_userId') || model.session.userId;
    return async.waterfall([
      function(cb) {
        var myGroupsQuery, publicGroupsQuery;
        publicGroupsQuery = model.query('groups').publicGroups();
        myGroupsQuery = model.query('groups').withMember(uuid);
        return model.fetch(publicGroupsQuery, myGroupsQuery, cb);
      }, function(publicGroups, groups, cb) {
        var groupsInfo, groupsObj, guildsQ, membersQ, partyQ;
        model.set('_publicGroups', _.sortBy(publicGroups.get(), function(g) {
          return -_.size(g.members);
        }));
        groupsObj = groups.get();
        if (_.isEmpty(groupsObj)) {
          return cb(true);
        }
        groupsInfo = _.reduce(groupsObj, (function(m, g) {
          if (g.type === 'guild') {
            m.guildIds.push(g.id);
          } else {
            m.partyId = g.id;
          }
          m.members = m.members.concat(g.members);
          return m;
        }), {
          guildIds: [],
          partyId: null,
          members: []
        });
        membersQ = model.query('users').publicInfo(groupsInfo.members);
        partyQ = model.query('groups').withIds(groupsInfo.partyId);
        guildsQ = model.query('groups').withIds(groupsInfo.guildIds);
        return model.fetch(membersQ, partyQ, guildsQ, cb);
      }
    ], function(err, members, party, guilds) {
      var mObj;
      if (err && err !== true) {
        return next(err);
      }
      if (members) {
        mObj = members.get();
        model.set("_members", _.object(_.pluck(mObj, 'id'), mObj));
        model.set("_membersArray", mObj);
      }
      if (party) {
        model.ref('_party', party);
      }
      if (guilds) {
        model.ref('_guilds', guilds);
      }
      return model.subscribe("users." + uuid, 'groups.habitrpg', function(err, user, tavern) {
        if (err) {
          return next(err);
        }
        model.ref('_user', user);
        model.ref('_habitRPG', tavern);
        if (!user.get()) {
          console.error("User not found - this shouldn't be happening!");
          return page.redirect('/logout');
        }
        require('./items').server(model);
        _.each(['habit', 'daily', 'todo', 'reward'], function(type) {
          model.refList("_" + type + "List", "_user.tasks", "_user." + type + "Ids");
          return true;
        });
        return page.render();
      });
    });
  });

  ready(function(model) {
    var browser, tz, user;
    user = model.at('_user');
    misc.fixCorruptUser(model);
    browser = require('./browser');
    require('./tasks').app(exports, model);
    require('./items').app(exports, model);
    require('./groups').app(exports, model, app);
    require('./profile').app(exports, model);
    require('./pets').app(exports, model);
    require('../server/private').app(exports, model);
    if (model.flags.nodeEnv !== 'production') {
      require('./debug').app(exports, model);
    }
    browser.app(exports, model, app);
    require('./unlock').app(exports, model);
    require('./filters').app(exports, model);
    require('./challenges').app(exports, model);
    exports.removeAt = function(e, el) {
      var confirmMessage;
      if ((confirmMessage = $(el).attr('data-confirm')) != null) {
        if (confirm(confirmMessage) !== true) {
          return;
        }
      }
      e.at().remove();
      if ($(el).attr('data-refresh')) {
        return browser.resetDom(model);
      }
    };
    tz = user.get("preferences.timezoneOffset");
    if (!(tz && tz === (new Date()).getTimezoneOffset())) {
      user.set('preferences.timezoneOffset', (new Date()).getTimezoneOffset());
    }
    /*
      Cron
    */

    return misc.batchTxn(model, function(uObj, paths) {
      _.each(['habit', 'daily', 'todo', 'reward'], function(type) {
        uObj["" + type + "s"] = _.where(uObj.tasks, {
          type: type
        });
        return true;
      });
      algos.cron(uObj, {
        paths: paths
      });
      if (_.isEmpty(paths) || (paths['lastCron'] && _.size(paths) === 1)) {
        return;
      }
      if (paths['stats.hp']) {
        delete paths['stats.hp'];
        return setTimeout(function() {
          browser.resetDom(model);
          return user.set('stats.hp', uObj.stats.hp);
        }, 750);
      }
    }, {
      cron: true
    });
  });

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
